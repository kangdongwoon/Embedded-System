###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        18/Mar/2020  17:19:02
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\CubeMX_Project\SPI_Cortex_Slave\Src\u8g_arm.c
#    Command line =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\Src\u8g_arm.c -D USE_HAL_DRIVER -D
#        STM32F401xE -lC
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\
#        --diag_suppress Pa050 -o
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\ --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Inc\ -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Include\ -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Debug\Drivers\u8glib_arm_v1.18.1\src\
#        -I C:\CubeMX_Project\SPI_Cortex_Slave\EWARM/../Inc\ -Ohz -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\u8g_arm.lst
#    Object file  =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\u8g_arm.o
#
###############################################################################

C:\CubeMX_Project\SPI_Cortex_Slave\Src\u8g_arm.c
      1          /*
      2          * u8g_arm.c
      3          *
      4          *  Created on: Mar 5, 2020
      5          *      Author: yelin
      6          */
      7          #ifndef _U8G_ARM_C
      8          #define _U8G_ARM_C
      9          
     10          
     11          #include <u8g_arm.h>
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void u8g_Delay(uint16_t val)
     14          {
     15            HAL_Delay(val);
   \                     u8g_Delay: (+1)
   \   00000000   0x.... 0x....      B.W      HAL_Delay
     16          }
     17          

   \                                 In section .text, align 2, keep-with-next
     18          void u8g_MicroDelay(void)
     19          {
     20            HAL_Delay(1);
   \                     u8g_MicroDelay: (+1)
   \   00000000   0x....             B.N      ?Subroutine0
     21          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      HAL_Delay
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void u8g_10MicroDelay(void)
   \                     u8g_10MicroDelay: (+1)
   \   00000000   0xBF00             Nop      
     24          {
     25            HAL_Delay(1);
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
     26          }
     27          
     28          

   \                                 In section .text, align 4, keep-with-next
     29          uint8_t u8g_com_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
     30          {
   \                     u8g_com_hw_spi_fn: (+1)
   \   00000000   0xB534             PUSH     {R2,R4,R5,LR}
   \   00000002   0x4618             MOV      R0,R3
     31            switch(msg)
   \   00000004   0x1E49             SUBS     R1,R1,#+1
   \   00000006   0x....             LDR.N    R4,??DataTable0  ;; 0x40020400
   \   00000008   0x....             LDR.N    R5,??DataTable0_1
   \   0000000A   0xF242 0x7310      MOVW     R3,#+10000
   \   0000000E   0x2906             CMP      R1,#+6
   \   00000010   0xD834             BHI.N    ??u8g_com_hw_spi_fn_1
   \   00000012   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??u8g_com_hw_spi_fn_0:
   \   00000016   0x14 0x04          DC8      0x14,0x4,0xA,0x16
   \              0x0A 0x16    
   \   0000001A   0x22 0x28          DC8      0x22,0x28,0x28,0x0
   \              0x28 0x00    
     32            {
     33            case U8G_COM_MSG_STOP:
     34              break;
     35            case U8G_COM_MSG_INIT:
     36              u8g_MicroDelay();
     37              break;
     38              
     39            case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
     40              u8g_10MicroDelay();
   \                     ??u8g_com_hw_spi_fn_2: (+1)
   \   0000001E   0x.... 0x....      BL       ?Subroutine2
     41              HAL_GPIO_WritePin(PORT, DC, (GPIO_PinState)arg_val);
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000022   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000026   0x2140             MOVS     R1,#+64
   \   00000028   0xE006             B.N      ??u8g_com_hw_spi_fn_3
     42              u8g_10MicroDelay();
     43              break;
     44              
     45            case U8G_COM_MSG_CHIP_SELECT:
     46              if ( arg_val == 0 )
   \                     ??u8g_com_hw_spi_fn_4: (+1)
   \   0000002A   0xB91A             CBNZ.N   R2,??u8g_com_hw_spi_fn_5
     47              {
     48                HAL_Delay(1);
   \   0000002C   0x.... 0x....      BL       ?Subroutine2
     49                HAL_GPIO_WritePin(PORT, CS, GPIO_PIN_SET);
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0xE000             B.N      ??u8g_com_hw_spi_fn_6
     50              }
     51              else
     52                HAL_GPIO_WritePin(PORT, CS, GPIO_PIN_RESET);
   \                     ??u8g_com_hw_spi_fn_5: (+1)
   \   00000034   0x2200             MOVS     R2,#+0
   \                     ??u8g_com_hw_spi_fn_6: (+1)
   \   00000036   0x2180             MOVS     R1,#+128
   \                     ??u8g_com_hw_spi_fn_3: (+1)
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       HAL_GPIO_WritePin
     53              u8g_MicroDelay();
   \                     ??u8g_com_hw_spi_fn_7: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xE01A             B.N      ??u8g_com_hw_spi_fn_8
     54              break;
     55              
     56            case U8G_COM_MSG_RESET:
     57              HAL_GPIO_WritePin(PORT, RST, GPIO_PIN_SET);
   \                     ??u8g_com_hw_spi_fn_9: (+1)
   \   00000042   0x.... 0x....      BL       ?Subroutine1
     58              u8g_10MicroDelay();
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000046   0x.... 0x....      BL       ?Subroutine2
     59              HAL_GPIO_WritePin(PORT, RST, GPIO_PIN_RESET);
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x.... 0x....      BL       ??Subroutine1_0
     60              u8g_10MicroDelay();
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000050   0x.... 0x....      BL       ?Subroutine2
     61              HAL_GPIO_WritePin(PORT, RST, GPIO_PIN_SET);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000054   0x.... 0x....      BL       ?Subroutine1
     62              break;
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000058   0xE010             B.N      ??u8g_com_hw_spi_fn_1
     63              
     64            case U8G_COM_MSG_WRITE_BYTE:
     65              HAL_SPI_Transmit(&SPI_HANDLER, &arg_val, 1, 10000);
   \                     ??u8g_com_hw_spi_fn_10: (+1)
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0xA900             ADD      R1,SP,#+0
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x.... 0x....      BL       HAL_SPI_Transmit
   \   00000064   0xE003             B.N      ??u8g_com_hw_spi_fn_11
     66              while(HAL_SPI_GetState(&SPI_HANDLER) != HAL_SPI_STATE_READY);
     67              u8g_MicroDelay();
     68              break;
     69              
     70            case U8G_COM_MSG_WRITE_SEQ:
     71            case U8G_COM_MSG_WRITE_SEQ_P:
     72              {
     73                HAL_SPI_Transmit(&SPI_HANDLER, (uint8_t *)arg_ptr, arg_val, 10000);
   \                     ??u8g_com_hw_spi_fn_12: (+1)
   \   00000066   0x4601             MOV      R1,R0
   \   00000068   0x4628             MOV      R0,R5
   \   0000006A   0x.... 0x....      BL       HAL_SPI_Transmit
     74                while(HAL_SPI_GetState(&SPI_HANDLER) != HAL_SPI_STATE_READY);
   \                     ??u8g_com_hw_spi_fn_11: (+1)
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       HAL_SPI_GetState
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD1FA             BNE.N    ??u8g_com_hw_spi_fn_11
     75                u8g_MicroDelay();
   \                     ??u8g_com_hw_spi_fn_8: (+1)
   \   00000078   0x.... 0x....      BL       HAL_Delay
     76                arg_val = 0;
     77              }
     78              break;
     79            }
     80            return 1;
   \                     ??u8g_com_hw_spi_fn_1: (+1)
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     81          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      HAL_Delay

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \                     ??Subroutine1_0: (+1)
   \   00000002   0x2120             MOVS     R1,#+32
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      B.W      HAL_GPIO_WritePin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     hspi1
     82          #endif /* INC_U8G_ARM_C_ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   u8g_10MicroDelay
         0   -> HAL_Delay
       0   u8g_Delay
         0   -> HAL_Delay
       0   u8g_MicroDelay
         0   -> HAL_Delay
      16   u8g_com_hw_spi_fn
        16   -> HAL_Delay
        16   -> HAL_GPIO_WritePin
        16   -> HAL_SPI_GetState
        16   -> HAL_SPI_Transmit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       6  ?Subroutine0
      10  ?Subroutine1
       6  ?Subroutine2
       2  u8g_10MicroDelay
       4  u8g_Delay
       2  u8g_MicroDelay
     128  u8g_com_hw_spi_fn

 
 166 bytes in section .text
 
 166 bytes of CODE memory

Errors: none
Warnings: none
