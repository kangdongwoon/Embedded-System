###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        19/Mar/2020  00:44:38
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\CubeMX_Project\SPI_Cortex_Slave\Src\stm32f4xx_it.c
#    Command line =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\Src\stm32f4xx_it.c -D
#        USE_HAL_DRIVER -D STM32F401xE -lC
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\
#        --diag_suppress Pa050 -o
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\ --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Inc\ -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Include\ -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Debug\Drivers\u8glib_arm_v1.18.1\src\
#        -I C:\CubeMX_Project\SPI_Cortex_Slave\EWARM/../Inc\ -Ohz -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\stm32f4xx_it.lst
#    Object file  =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\stm32f4xx_it.o
#
###############################################################################

C:\CubeMX_Project\SPI_Cortex_Slave\Src\stm32f4xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_it.c
      4            * @brief   Interrupt Service Routines.
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2020 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "stm32f4xx_hal.h"
     35          #include "stm32f4xx.h"
     36          #include "stm32f4xx_it.h"
     37          
     38          /* USER CODE BEGIN 0 */
     39          
     40          /* USER CODE END 0 */
     41          
     42          /* External variables --------------------------------------------------------*/
     43          extern DMA_HandleTypeDef hdma_spi1_rx;
     44          extern DMA_HandleTypeDef hdma_spi1_tx;
     45          extern SPI_HandleTypeDef hspi1;
     46          extern DMA_HandleTypeDef hdma_usart6_tx;
     47          extern DMA_HandleTypeDef hdma_usart6_rx;
     48          extern UART_HandleTypeDef huart6;
     49          
     50          /******************************************************************************/
     51          /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
     52          /******************************************************************************/
     53          
     54          /**
     55          * @brief This function handles Non maskable interrupt.
     56          */

   \                                 In section .text, align 2, keep-with-next
     57          void NMI_Handler(void)
     58          {
     59            /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
     60          
     61            /* USER CODE END NonMaskableInt_IRQn 0 */
     62            /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
     63          
     64            /* USER CODE END NonMaskableInt_IRQn 1 */
     65          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     66          
     67          /**
     68          * @brief This function handles Hard fault interrupt.
     69          */

   \                                 In section .text, align 2, keep-with-next
     70          void HardFault_Handler(void)
     71          {
     72            /* USER CODE BEGIN HardFault_IRQn 0 */
     73          
     74            /* USER CODE END HardFault_IRQn 0 */
     75            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??HardFault_Handler_0
     76            {
     77              /* USER CODE BEGIN W1_HardFault_IRQn 0 */
     78              /* USER CODE END W1_HardFault_IRQn 0 */
     79            }
     80            /* USER CODE BEGIN HardFault_IRQn 1 */
     81          
     82            /* USER CODE END HardFault_IRQn 1 */
     83          }
     84          
     85          /**
     86          * @brief This function handles Memory management fault.
     87          */

   \                                 In section .text, align 2, keep-with-next
     88          void MemManage_Handler(void)
     89          {
     90            /* USER CODE BEGIN MemoryManagement_IRQn 0 */
     91          
     92            /* USER CODE END MemoryManagement_IRQn 0 */
     93            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??MemManage_Handler_0
     94            {
     95              /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
     96              /* USER CODE END W1_MemoryManagement_IRQn 0 */
     97            }
     98            /* USER CODE BEGIN MemoryManagement_IRQn 1 */
     99          
    100            /* USER CODE END MemoryManagement_IRQn 1 */
    101          }
    102          
    103          /**
    104          * @brief This function handles Pre-fetch fault, memory access fault.
    105          */

   \                                 In section .text, align 2, keep-with-next
    106          void BusFault_Handler(void)
    107          {
    108            /* USER CODE BEGIN BusFault_IRQn 0 */
    109          
    110            /* USER CODE END BusFault_IRQn 0 */
    111            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??BusFault_Handler_0
    112            {
    113              /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    114              /* USER CODE END W1_BusFault_IRQn 0 */
    115            }
    116            /* USER CODE BEGIN BusFault_IRQn 1 */
    117          
    118            /* USER CODE END BusFault_IRQn 1 */
    119          }
    120          
    121          /**
    122          * @brief This function handles Undefined instruction or illegal state.
    123          */

   \                                 In section .text, align 2, keep-with-next
    124          void UsageFault_Handler(void)
    125          {
    126            /* USER CODE BEGIN UsageFault_IRQn 0 */
    127          
    128            /* USER CODE END UsageFault_IRQn 0 */
    129            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??UsageFault_Handler_0
    130            {
    131              /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    132              /* USER CODE END W1_UsageFault_IRQn 0 */
    133            }
    134            /* USER CODE BEGIN UsageFault_IRQn 1 */
    135          
    136            /* USER CODE END UsageFault_IRQn 1 */
    137          }
    138          
    139          /**
    140          * @brief This function handles System service call via SWI instruction.
    141          */

   \                                 In section .text, align 2, keep-with-next
    142          void SVC_Handler(void)
    143          {
    144            /* USER CODE BEGIN SVCall_IRQn 0 */
    145          
    146            /* USER CODE END SVCall_IRQn 0 */
    147            /* USER CODE BEGIN SVCall_IRQn 1 */
    148          
    149            /* USER CODE END SVCall_IRQn 1 */
    150          }
   \                     SVC_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    151          
    152          /**
    153          * @brief This function handles Debug monitor.
    154          */

   \                                 In section .text, align 2, keep-with-next
    155          void DebugMon_Handler(void)
    156          {
    157            /* USER CODE BEGIN DebugMonitor_IRQn 0 */
    158          
    159            /* USER CODE END DebugMonitor_IRQn 0 */
    160            /* USER CODE BEGIN DebugMonitor_IRQn 1 */
    161          
    162            /* USER CODE END DebugMonitor_IRQn 1 */
    163          }
   \                     DebugMon_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    164          
    165          /**
    166          * @brief This function handles Pendable request for system service.
    167          */

   \                                 In section .text, align 2, keep-with-next
    168          void PendSV_Handler(void)
    169          {
    170            /* USER CODE BEGIN PendSV_IRQn 0 */
    171          
    172            /* USER CODE END PendSV_IRQn 0 */
    173            /* USER CODE BEGIN PendSV_IRQn 1 */
    174          
    175            /* USER CODE END PendSV_IRQn 1 */
    176          }
   \                     PendSV_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    177          
    178          /**
    179          * @brief This function handles System tick timer.
    180          */

   \                                 In section .text, align 2, keep-with-next
    181          void SysTick_Handler(void)
    182          {
   \                     SysTick_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    183            /* USER CODE BEGIN SysTick_IRQn 0 */
    184          
    185            /* USER CODE END SysTick_IRQn 0 */
    186            HAL_IncTick();
   \   00000002   0x.... 0x....      BL       HAL_IncTick
    187            HAL_SYSTICK_IRQHandler();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x.... 0x....      B.W      HAL_SYSTICK_IRQHandler
    188            /* USER CODE BEGIN SysTick_IRQn 1 */
    189          
    190            /* USER CODE END SysTick_IRQn 1 */
    191          }
    192          
    193          /******************************************************************************/
    194          /* STM32F4xx Peripheral Interrupt Handlers                                    */
    195          /* Add here the Interrupt Handlers for the used peripherals.                  */
    196          /* For the available peripheral interrupt handler names,                      */
    197          /* please refer to the startup file (startup_stm32f4xx.s).                    */
    198          /******************************************************************************/
    199          
    200          /**
    201          * @brief This function handles SPI1 global interrupt.
    202          */

   \                                 In section .text, align 2, keep-with-next
    203          void SPI1_IRQHandler(void)
    204          {
    205            /* USER CODE BEGIN SPI1_IRQn 0 */
    206          
    207            /* USER CODE END SPI1_IRQn 0 */
    208            HAL_SPI_IRQHandler(&hspi1);
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x.... 0x....      B.W      HAL_SPI_IRQHandler
    209            /* USER CODE BEGIN SPI1_IRQn 1 */
    210          
    211            /* USER CODE END SPI1_IRQn 1 */
    212          }
    213          
    214          /**
    215          * @brief This function handles DMA2 stream0 global interrupt.
    216          */

   \                                 In section .text, align 2, keep-with-next
    217          void DMA2_Stream0_IRQHandler(void)
    218          {
    219            /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
    220          
    221            /* USER CODE END DMA2_Stream0_IRQn 0 */
    222            HAL_DMA_IRQHandler(&hdma_spi1_rx);
   \                     DMA2_Stream0_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_1
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
    223            /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
    224          
    225            /* USER CODE END DMA2_Stream0_IRQn 1 */
    226          }
    227          
    228          /**
    229          * @brief This function handles DMA2 stream1 global interrupt.
    230          */

   \                                 In section .text, align 2, keep-with-next
    231          void DMA2_Stream1_IRQHandler(void)
    232          {
    233            /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
    234          
    235            /* USER CODE END DMA2_Stream1_IRQn 0 */
    236            HAL_DMA_IRQHandler(&hdma_usart6_rx);
   \                     DMA2_Stream1_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_2
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
    237            /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
    238          
    239            /* USER CODE END DMA2_Stream1_IRQn 1 */
    240          }
    241          
    242          /**
    243          * @brief This function handles DMA2 stream3 global interrupt.
    244          */

   \                                 In section .text, align 2, keep-with-next
    245          void DMA2_Stream3_IRQHandler(void)
    246          {
    247            /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */
    248          
    249            /* USER CODE END DMA2_Stream3_IRQn 0 */
    250            HAL_DMA_IRQHandler(&hdma_spi1_tx);
   \                     DMA2_Stream3_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_3
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
    251            /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */
    252          
    253            /* USER CODE END DMA2_Stream3_IRQn 1 */
    254          }
    255          
    256          /**
    257          * @brief This function handles DMA2 stream6 global interrupt.
    258          */

   \                                 In section .text, align 2, keep-with-next
    259          void DMA2_Stream6_IRQHandler(void)
    260          {
    261            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
    262          
    263            /* USER CODE END DMA2_Stream6_IRQn 0 */
    264            HAL_DMA_IRQHandler(&hdma_usart6_tx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_4
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
    265            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
    266          
    267            /* USER CODE END DMA2_Stream6_IRQn 1 */
    268          }
    269          
    270          /**
    271          * @brief This function handles USART6 global interrupt.
    272          */

   \                                 In section .text, align 2, keep-with-next
    273          void USART6_IRQHandler(void)
    274          {
    275            /* USER CODE BEGIN USART6_IRQn 0 */
    276          
    277            /* USER CODE END USART6_IRQn 0 */
    278            HAL_UART_IRQHandler(&huart6);
   \                     USART6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_5
   \   00000002   0x.... 0x....      B.W      HAL_UART_IRQHandler
    279            /* USER CODE BEGIN USART6_IRQn 1 */
    280          
    281            /* USER CODE END USART6_IRQn 1 */
    282          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     hspi1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     hdma_spi1_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     hdma_usart6_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     hdma_spi1_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     hdma_usart6_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     huart6
    283          
    284          /* USER CODE BEGIN 1 */
    285          
    286          /* USER CODE END 1 */
    287          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DMA2_Stream0_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream1_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream3_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SPI1_IRQHandler
         0   -> HAL_SPI_IRQHandler
       0   SVC_Handler
       8   SysTick_Handler
         8   -> HAL_IncTick
         0   -> HAL_SYSTICK_IRQHandler
       0   USART6_IRQHandler
         0   -> HAL_UART_IRQHandler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       2  BusFault_Handler
       6  DMA2_Stream0_IRQHandler
       6  DMA2_Stream1_IRQHandler
       6  DMA2_Stream3_IRQHandler
       6  DMA2_Stream6_IRQHandler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       6  SPI1_IRQHandler
       2  SVC_Handler
      14  SysTick_Handler
       6  USART6_IRQHandler
       2  UsageFault_Handler

 
 90 bytes in section .text
 
 90 bytes of CODE memory

Errors: none
Warnings: none
