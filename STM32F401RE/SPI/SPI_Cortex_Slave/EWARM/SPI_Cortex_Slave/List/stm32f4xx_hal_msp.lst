###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        19/Mar/2020  00:44:33
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\CubeMX_Project\SPI_Cortex_Slave\Src\stm32f4xx_hal_msp.c
#    Command line =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\Src\stm32f4xx_hal_msp.c -D
#        USE_HAL_DRIVER -D STM32F401xE -lC
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\
#        --diag_suppress Pa050 -o
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\ --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Inc\ -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Include\ -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Debug\Drivers\u8glib_arm_v1.18.1\src\
#        -I C:\CubeMX_Project\SPI_Cortex_Slave\EWARM/../Inc\ -Ohz -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\stm32f4xx_hal_msp.lst
#    Object file  =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\stm32f4xx_hal_msp.o
#
###############################################################################

C:\CubeMX_Project\SPI_Cortex_Slave\Src\stm32f4xx_hal_msp.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : stm32f4xx_hal_msp.c
      4            * Description        : This file provides code for the MSP Initialization 
      5            *                      and de-Initialization codes.
      6            ******************************************************************************
      7            ** This notice applies to any and all portions of this file
      8            * that are not between comment pairs USER CODE BEGIN and
      9            * USER CODE END. Other portions of this file, whether 
     10            * inserted by the user or by software development tools
     11            * are owned by their respective copyright owners.
     12            *
     13            * COPYRIGHT(c) 2020 STMicroelectronics
     14            *
     15            * Redistribution and use in source and binary forms, with or without modification,
     16            * are permitted provided that the following conditions are met:
     17            *   1. Redistributions of source code must retain the above copyright notice,
     18            *      this list of conditions and the following disclaimer.
     19            *   2. Redistributions in binary form must reproduce the above copyright notice,
     20            *      this list of conditions and the following disclaimer in the documentation
     21            *      and/or other materials provided with the distribution.
     22            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     23            *      may be used to endorse or promote products derived from this software
     24            *      without specific prior written permission.
     25            *
     26            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     27            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     28            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     29            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     30            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     31            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     32            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     33            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     34            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     35            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     36            *
     37            ******************************************************************************
     38            */
     39          /* Includes ------------------------------------------------------------------*/
     40          #include "stm32f4xx_hal.h"
     41          
     42          extern DMA_HandleTypeDef hdma_spi1_rx;
     43          
     44          extern DMA_HandleTypeDef hdma_spi1_tx;
     45          
     46          extern DMA_HandleTypeDef hdma_usart6_tx;
     47          
     48          extern DMA_HandleTypeDef hdma_usart6_rx;
     49          
     50          extern void _Error_Handler(char *, int);
     51          /* USER CODE BEGIN 0 */
     52          
     53          /* USER CODE END 0 */
     54          /**
     55            * Initializes the Global MSP.
     56            */

   \                                 In section .text, align 2, keep-with-next
     57          void HAL_MspInit(void)
     58          {
   \                     HAL_MspInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     59            /* USER CODE BEGIN MspInit 0 */
     60          
     61            /* USER CODE END MspInit 0 */
     62          
     63            HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       HAL_NVIC_SetPriorityGrouping
     64          
     65            /* System interrupt init*/
     66            /* MemoryManagement_IRQn interrupt configuration */
     67            HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0xF06F 0x000B      MVN      R0,#+11
   \   00000010   0x.... 0x....      BL       HAL_NVIC_SetPriority
     68            /* BusFault_IRQn interrupt configuration */
     69            HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x4611             MOV      R1,R2
   \   00000018   0xF06F 0x000A      MVN      R0,#+10
   \   0000001C   0x.... 0x....      BL       HAL_NVIC_SetPriority
     70            /* UsageFault_IRQn interrupt configuration */
     71            HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x4611             MOV      R1,R2
   \   00000024   0xF06F 0x0009      MVN      R0,#+9
   \   00000028   0x.... 0x....      BL       HAL_NVIC_SetPriority
     72            /* SVCall_IRQn interrupt configuration */
     73            HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x4611             MOV      R1,R2
   \   00000030   0xF06F 0x0004      MVN      R0,#+4
   \   00000034   0x.... 0x....      BL       HAL_NVIC_SetPriority
     74            /* DebugMonitor_IRQn interrupt configuration */
     75            HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x4611             MOV      R1,R2
   \   0000003C   0xF06F 0x0003      MVN      R0,#+3
   \   00000040   0x.... 0x....      BL       HAL_NVIC_SetPriority
     76            /* PendSV_IRQn interrupt configuration */
     77            HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x4611             MOV      R1,R2
   \   00000048   0xF06F 0x0001      MVN      R0,#+1
   \   0000004C   0x.... 0x....      BL       HAL_NVIC_SetPriority
     78            /* SysTick_IRQn interrupt configuration */
     79            HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
   \   00000050   0xE8BD 0x4008      POP      {R3,LR}
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x4611             MOV      R1,R2
   \   00000058   0xF04F 0x30FF      MOV      R0,#-1
   \   0000005C   0x.... 0x....      B.W      HAL_NVIC_SetPriority
     80          
     81            /* USER CODE BEGIN MspInit 1 */
     82          
     83            /* USER CODE END MspInit 1 */
     84          }
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
     87          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB086             SUB      SP,SP,#+24
     88          
     89            GPIO_InitTypeDef GPIO_InitStruct;
     90            if(hspi->Instance==SPI1)
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x....             LDR.N    R1,??DataTable4  ;; 0x40013000
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD153             BNE.N    ??HAL_SPI_MspInit_0
     91            {
     92            /* USER CODE BEGIN SPI1_MspInit 0 */
     93          
     94            /* USER CODE END SPI1_MspInit 0 */
     95              /* Peripheral clock enable */
     96              __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000014   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000018   0x6001             STR      R1,[R0, #+0]
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x9800             LDR      R0,[SP, #+0]
     97            
     98              /**SPI1 GPIO Configuration    
     99              PA4     ------> SPI1_NSS
    100              PA5     ------> SPI1_SCK
    101              PA6     ------> SPI1_MISO
    102              PA7     ------> SPI1_MOSI 
    103              */
    104              GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   \   00000026   0x20F0             MOVS     R0,#+240
   \   00000028   0x9001             STR      R0,[SP, #+4]
    105              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9002             STR      R0,[SP, #+8]
    106              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9003             STR      R0,[SP, #+12]
    107              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x9004             STR      R0,[SP, #+16]
    108              GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   \   00000036   0x2005             MOVS     R0,#+5
   \   00000038   0x9005             STR      R0,[SP, #+20]
    109              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000003A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40020000
   \   0000003C   0x.... 0x....      BL       HAL_GPIO_Init
    110          
    111              /* SPI1 DMA Init */
    112              /* SPI1_RX Init */
    113              hdma_spi1_rx.Instance = DMA2_Stream0;
   \   00000040   0x....             LDR.N    R7,??DataTable4_2
   \   00000042   0x.... 0x....      LDR.W    R8,??DataTable4_3  ;; 0x40026410
    114              hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
   \   00000046   0xF04F 0x66C0      MOV      R6,#+100663296
    115              hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xF8C7 0x8000      STR      R8,[R7, #+0]
   \   00000050   0x607E             STR      R6,[R7, #+4]
   \   00000052   0x60B8             STR      R0,[R7, #+8]
    116              hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   00000054   0x60F8             STR      R0,[R7, #+12]
    117              hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000056   0xF44F 0x6580      MOV      R5,#+1024
   \   0000005A   0x.... 0x....      BL       ?Subroutine2
    118              hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    119              hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    120              hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    121              hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    122              hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000005E   0xF44F 0x7980      MOV      R9,#+256
   \   00000062   0xF8C7 0x901C      STR      R9,[R7, #+28]
    123              if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
   \   00000066   0x4638             MOV      R0,R7
   \   00000068   0x.... 0x....      ADR.W    R10,`?<Constant "C:\\\\CubeMX_Project\\\\SPI...">`
   \   0000006C   0x.... 0x....      BL       HAL_DMA_Init
   \   00000070   0xB110             CBZ.N    R0,??CrossCallReturnLabel_7
    124              {
    125                _Error_Handler(__FILE__, __LINE__);
   \   00000072   0x217D             MOVS     R1,#+125
   \   00000074   0x.... 0x....      BL       ?Subroutine3
    126              }
    127          
    128              __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000078   0x64E7             STR      R7,[R4, #+76]
   \   0000007A   0x63BC             STR      R4,[R7, #+56]
    129          
    130              /* SPI1_TX Init */
    131              hdma_spi1_tx.Instance = DMA2_Stream3;
   \   0000007C   0xF108 0x0048      ADD      R0,R8,#+72
   \   00000080   0x....             LDR.N    R7,??DataTable4_4
   \   00000082   0x6038             STR      R0,[R7, #+0]
    132              hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
   \   00000084   0x607E             STR      R6,[R7, #+4]
    133              hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   00000086   0x2040             MOVS     R0,#+64
   \   00000088   0x60B8             STR      R0,[R7, #+8]
    134              hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x60F8             STR      R0,[R7, #+12]
    135              hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
   \   0000008E   0x.... 0x....      BL       ?Subroutine2
    136              hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    137              hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    138              hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
    139              hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    140              hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000092   0xF8C7 0x901C      STR      R9,[R7, #+28]
    141              if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
   \   00000096   0x4638             MOV      R0,R7
   \   00000098   0x.... 0x....      BL       HAL_DMA_Init
   \   0000009C   0xB110             CBZ.N    R0,??CrossCallReturnLabel_6
    142              {
    143                _Error_Handler(__FILE__, __LINE__);
   \   0000009E   0x218F             MOVS     R1,#+143
   \   000000A0   0x.... 0x....      BL       ?Subroutine3
    144              }
    145          
    146              __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
   \                     ??CrossCallReturnLabel_6: (+1)
   \   000000A4   0x64A7             STR      R7,[R4, #+72]
   \   000000A6   0x63BC             STR      R4,[R7, #+56]
    147          
    148              /* SPI1 interrupt Init */
    149              HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
   \   000000A8   0x2200             MOVS     R2,#+0
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x2023             MOVS     R0,#+35
   \   000000AE   0x.... 0x....      BL       HAL_NVIC_SetPriority
    150              HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000B2   0x2023             MOVS     R0,#+35
   \   000000B4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    151            /* USER CODE BEGIN SPI1_MspInit 1 */
    152          
    153            /* USER CODE END SPI1_MspInit 1 */
    154            }
    155          
    156          }
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   000000B8   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x613D             STR      R5,[R7, #+16]
   \   00000002   0x6178             STR      R0,[R7, #+20]
   \   00000004   0x61B8             STR      R0,[R7, #+24]
   \   00000006   0x6238             STR      R0,[R7, #+32]
   \   00000008   0x6278             STR      R0,[R7, #+36]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB006             ADD      SP,SP,#+24
   \   00000002   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x4650             MOV      R0,R10
   \   00000002   0x.... 0x....      B.W      _Error_Handler

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9000             STR      R0,[SP, #+0]
   \   00000004   0x....             LDR.N    R0,??DataTable4_5  ;; 0x40023844
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x4770             BX       LR
    157          

   \                                 In section .text, align 2, keep-with-next
    158          void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
    159          {
   \                     HAL_SPI_MspDeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    160          
    161            if(hspi->Instance==SPI1)
   \   00000004   0x....             LDR.N    R1,??DataTable4  ;; 0x40013000
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD113             BNE.N    ??HAL_SPI_MspDeInit_0
    162            {
    163            /* USER CODE BEGIN SPI1_MspDeInit 0 */
    164          
    165            /* USER CODE END SPI1_MspDeInit 0 */
    166              /* Peripheral clock disable */
    167              __HAL_RCC_SPI1_CLK_DISABLE();
   \   0000000C   0x....             LDR.N    R0,??DataTable4_5  ;; 0x40023844
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF421 0x5180      BIC      R1,R1,#0x1000
   \   00000014   0x6001             STR      R1,[R0, #+0]
    168            
    169              /**SPI1 GPIO Configuration    
    170              PA4     ------> SPI1_NSS
    171              PA5     ------> SPI1_SCK
    172              PA6     ------> SPI1_MISO
    173              PA7     ------> SPI1_MOSI 
    174              */
    175              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
   \   00000016   0x21F0             MOVS     R1,#+240
   \   00000018   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40020000
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_DeInit
    176          
    177              /* SPI1 DMA DeInit */
    178              HAL_DMA_DeInit(hspi->hdmarx);
   \   0000001E   0x6CE0             LDR      R0,[R4, #+76]
   \   00000020   0x.... 0x....      BL       HAL_DMA_DeInit
    179              HAL_DMA_DeInit(hspi->hdmatx);
   \   00000024   0x6CA0             LDR      R0,[R4, #+72]
   \   00000026   0x.... 0x....      BL       HAL_DMA_DeInit
    180          
    181              /* SPI1 interrupt DeInit */
    182              HAL_NVIC_DisableIRQ(SPI1_IRQn);
   \   0000002A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002E   0x2023             MOVS     R0,#+35
   \   00000030   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    183            /* USER CODE BEGIN SPI1_MspDeInit 1 */
    184          
    185            /* USER CODE END SPI1_MspDeInit 1 */
    186            }
    187          
    188          }
   \                     ??HAL_SPI_MspDeInit_0: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    189          

   \                                 In section .text, align 2, keep-with-next
    190          void HAL_UART_MspInit(UART_HandleTypeDef* huart)
    191          {
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB086             SUB      SP,SP,#+24
    192          
    193            GPIO_InitTypeDef GPIO_InitStruct;
    194            if(huart->Instance==USART6)
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x....             LDR.N    R1,??DataTable4_6  ;; 0x40011400
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD14D             BNE.N    ??HAL_UART_MspInit_0
    195            {
    196            /* USER CODE BEGIN USART6_MspInit 0 */
    197          
    198            /* USER CODE END USART6_MspInit 0 */
    199              /* Peripheral clock enable */
    200              __HAL_RCC_USART6_CLK_ENABLE();
   \   00000010   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000014   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000018   0x6001             STR      R1,[R0, #+0]
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF000 0x0020      AND      R0,R0,#0x20
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x9800             LDR      R0,[SP, #+0]
    201            
    202              /**USART6 GPIO Configuration    
    203              PC6     ------> USART6_TX
    204              PC7     ------> USART6_RX 
    205              */
    206              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x9001             STR      R0,[SP, #+4]
    207              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9002             STR      R0,[SP, #+8]
    208              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x9003             STR      R0,[SP, #+12]
    209              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x9004             STR      R0,[SP, #+16]
    210              GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
   \   00000036   0x2008             MOVS     R0,#+8
   \   00000038   0x9005             STR      R0,[SP, #+20]
    211              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000003A   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40020800
   \   0000003C   0x.... 0x....      BL       HAL_GPIO_Init
    212          
    213              /* USART6 DMA Init */
    214              /* USART6_TX Init */
    215              hdma_usart6_tx.Instance = DMA2_Stream6;
   \   00000040   0x.... 0x....      LDR.W    R8,??DataTable4_8  ;; 0x40026428
   \   00000044   0x....             LDR.N    R6,??DataTable4_9
    216              hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    217              hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    218              hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    219              hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
    220              hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    221              hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    222              hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
    223              hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
    224              hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    225              if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
   \   00000046   0x.... 0x....      ADR.W    R10,`?<Constant "C:\\\\CubeMX_Project\\\\SPI...">`
   \   0000004A   0xF108 0x0078      ADD      R0,R8,#+120
   \   0000004E   0x6030             STR      R0,[R6, #+0]
   \   00000050   0xF04F 0x6720      MOV      R7,#+167772160
   \   00000054   0x2040             MOVS     R0,#+64
   \   00000056   0x60B0             STR      R0,[R6, #+8]
   \   00000058   0x6077             STR      R7,[R6, #+4]
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x60F0             STR      R0,[R6, #+12]
   \   0000005E   0xF44F 0x6580      MOV      R5,#+1024
   \   00000062   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000066   0xF44F 0x7980      MOV      R9,#+256
   \   0000006A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_9: (+1)
   \   0000006E   0xB110             CBZ.N    R0,??CrossCallReturnLabel_5
    226              {
    227                _Error_Handler(__FILE__, __LINE__);
   \   00000070   0x21E3             MOVS     R1,#+227
   \   00000072   0x.... 0x....      BL       ?Subroutine3
    228              }
    229          
    230              __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000076   0x6326             STR      R6,[R4, #+48]
   \   00000078   0x63B4             STR      R4,[R6, #+56]
    231          
    232              /* USART6_RX Init */
    233              hdma_usart6_rx.Instance = DMA2_Stream1;
    234              hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
    235              hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x....             LDR.N    R6,??DataTable4_10
   \   0000007E   0xF8C6 0x8000      STR      R8,[R6, #+0]
   \   00000082   0x6077             STR      R7,[R6, #+4]
   \   00000084   0x60B0             STR      R0,[R6, #+8]
    236              hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   00000086   0x60F0             STR      R0,[R6, #+12]
    237              hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000088   0x.... 0x....      BL       ?Subroutine5
    238              hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    239              hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    240              hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
    241              hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
    242              hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \                     ??CrossCallReturnLabel_10: (+1)
   \   0000008C   0x.... 0x....      BL       ?Subroutine4
    243              if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000090   0xB110             CBZ.N    R0,??CrossCallReturnLabel_4
    244              {
    245                _Error_Handler(__FILE__, __LINE__);
   \   00000092   0x21F5             MOVS     R1,#+245
   \   00000094   0x.... 0x....      BL       ?Subroutine3
    246              }
    247          
    248              __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000098   0x6366             STR      R6,[R4, #+52]
   \   0000009A   0x63B4             STR      R4,[R6, #+56]
    249          
    250              /* USART6 interrupt Init */
    251              HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
   \   0000009C   0x2200             MOVS     R2,#+0
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x2047             MOVS     R0,#+71
   \   000000A2   0x.... 0x....      BL       HAL_NVIC_SetPriority
    252              HAL_NVIC_EnableIRQ(USART6_IRQn);
   \   000000A6   0x2047             MOVS     R0,#+71
   \   000000A8   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    253            /* USER CODE BEGIN USART6_MspInit 1 */
    254          
    255            /* USER CODE END USART6_MspInit 1 */
    256            }
    257          
    258          }
   \                     ??HAL_UART_MspInit_0: (+1)
   \   000000AC                      REQUIRE ?Subroutine0
   \   000000AC                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x6135             STR      R5,[R6, #+16]
   \   00000002   0x6170             STR      R0,[R6, #+20]
   \   00000004   0x61B0             STR      R0,[R6, #+24]
   \   00000006   0x6230             STR      R0,[R6, #+32]
   \   00000008   0x6270             STR      R0,[R6, #+36]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0xF8C6 0x901C      STR      R9,[R6, #+28]
   \   00000004   0x4630             MOV      R0,R6
   \   00000006   0x.... 0x....      B.W      HAL_DMA_Init
    259          

   \                                 In section .text, align 2, keep-with-next
    260          void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
    261          {
   \                     HAL_UART_MspDeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    262          
    263            if(huart->Instance==USART6)
   \   00000004   0x....             LDR.N    R1,??DataTable4_6  ;; 0x40011400
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD113             BNE.N    ??HAL_UART_MspDeInit_0
    264            {
    265            /* USER CODE BEGIN USART6_MspDeInit 0 */
    266          
    267            /* USER CODE END USART6_MspDeInit 0 */
    268              /* Peripheral clock disable */
    269              __HAL_RCC_USART6_CLK_DISABLE();
   \   0000000C   0x....             LDR.N    R0,??DataTable4_5  ;; 0x40023844
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF021 0x0120      BIC      R1,R1,#0x20
   \   00000014   0x6001             STR      R1,[R0, #+0]
    270            
    271              /**USART6 GPIO Configuration    
    272              PC6     ------> USART6_TX
    273              PC7     ------> USART6_RX 
    274              */
    275              HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
   \   00000016   0x21C0             MOVS     R1,#+192
   \   00000018   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40020800
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_DeInit
    276          
    277              /* USART6 DMA DeInit */
    278              HAL_DMA_DeInit(huart->hdmatx);
   \   0000001E   0x6B20             LDR      R0,[R4, #+48]
   \   00000020   0x.... 0x....      BL       HAL_DMA_DeInit
    279              HAL_DMA_DeInit(huart->hdmarx);
   \   00000024   0x6B60             LDR      R0,[R4, #+52]
   \   00000026   0x.... 0x....      BL       HAL_DMA_DeInit
    280          
    281              /* USART6 interrupt DeInit */
    282              HAL_NVIC_DisableIRQ(USART6_IRQn);
   \   0000002A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002E   0x2047             MOVS     R0,#+71
   \   00000030   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    283            /* USER CODE BEGIN USART6_MspDeInit 1 */
    284          
    285            /* USER CODE END USART6_MspDeInit 1 */
    286            }
    287          
    288          }
   \                     ??HAL_UART_MspDeInit_0: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     hdma_spi1_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     hdma_spi1_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     hdma_usart6_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     hdma_usart6_rx

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "C:\\\\CubeMX_Project\\\\SPI...">`:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 43H, 75H, 62H, 65H, 4DH
   \              0x5C 0x43    
   \              0x75 0x62    
   \              0x65 0x4D    
   \   00000008   0x58 0x5F          DC8 58H, 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H
   \              0x50 0x72    
   \              0x6F 0x6A    
   \              0x65 0x63    
   \   00000010   0x74 0x5C          DC8 74H, 5CH, 53H, 50H, 49H, 5FH, 43H, 6FH
   \              0x53 0x50    
   \              0x49 0x5F    
   \              0x43 0x6F    
   \   00000018   0x72 0x74          DC8 72H, 74H, 65H, 78H, 5FH, 53H, 6CH, 61H
   \              0x65 0x78    
   \              0x5F 0x53    
   \              0x6C 0x61    
   \   00000020   0x76 0x65          DC8 76H, 65H, 5CH, 53H, 72H, 63H, 5CH, 73H
   \              0x5C 0x53    
   \              0x72 0x63    
   \              0x5C 0x73    
   \   00000028   0x74 0x6D          DC8 74H, 6DH, 33H, 32H, 66H, 34H, 78H, 78H
   \              0x33 0x32    
   \              0x66 0x34    
   \              0x78 0x78    
   \   00000030   0x5F 0x68          DC8 5FH, 68H, 61H, 6CH, 5FH, 6DH, 73H, 70H
   \              0x61 0x6C    
   \              0x5F 0x6D    
   \              0x73 0x70    
   \   00000038   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0
    289          
    290          /* USER CODE BEGIN 1 */
    291          
    292          /* USER CODE END 1 */
    293          
    294          /**
    295            * @}
    296            */
    297          
    298          /**
    299            * @}
    300            */
    301          
    302          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_MspInit
         0   -> HAL_NVIC_SetPriority
         8   -> HAL_NVIC_SetPriority
         8   -> HAL_NVIC_SetPriorityGrouping
       8   HAL_SPI_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
         0   -> HAL_NVIC_DisableIRQ
      56   HAL_SPI_MspInit
        56   -> HAL_DMA_Init
        56   -> HAL_GPIO_Init
        56   -> HAL_NVIC_EnableIRQ
        56   -> HAL_NVIC_SetPriority
        56   -> _Error_Handler
       8   HAL_UART_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
         0   -> HAL_NVIC_DisableIRQ
      56   HAL_UART_MspInit
        56   -> HAL_DMA_Init
        56   -> HAL_GPIO_Init
        56   -> HAL_NVIC_EnableIRQ
        56   -> HAL_NVIC_SetPriority
        56   -> _Error_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      60  ?<Constant "C:\\CubeMX_Project\\SPI...">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       6  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine2
       6  ?Subroutine3
      10  ?Subroutine4
      12  ?Subroutine5
      96  HAL_MspInit
      54  HAL_SPI_MspDeInit
     186  HAL_SPI_MspInit
      54  HAL_UART_MspDeInit
     172  HAL_UART_MspInit

 
 722 bytes in section .text
 
 722 bytes of CODE memory

Errors: none
Warnings: none
