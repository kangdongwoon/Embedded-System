###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        19/Mar/2020  02:16:08
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\CubeMX_Project\SPI_Cortex_Slave\Src\main.c
#    Command line =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\Src\main.c -D USE_HAL_DRIVER -D
#        STM32F401xE -lC
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\
#        --diag_suppress Pa050 -o
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\ --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Inc\ -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:/CubeMX_Project/STM32Cube_FW_F4_V1.19.0/Drivers/CMSIS/Include\ -I
#        C:\CubeMX_Project\SPI_Cortex_Slave\Debug\Drivers\u8glib_arm_v1.18.1\src\
#        -I C:\CubeMX_Project\SPI_Cortex_Slave\EWARM/../Inc\ -Ohz -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/List\main.lst
#    Object file  =  
#        C:\CubeMX_Project\SPI_Cortex_Slave\EWARM\SPI_Cortex_Slave/Obj\main.o
#
###############################################################################

C:\CubeMX_Project\SPI_Cortex_Slave\Src\main.c
      1          /**
      2            ******************************************************************************
      3            * @file           : main.c
      4            * @brief          : Main program body
      5            ******************************************************************************
      6            ** This notice applies to any and all portions of this file
      7            * that are not between comment pairs USER CODE BEGIN and
      8            * USER CODE END. Other portions of this file, whether 
      9            * inserted by the user or by software development tools
     10            * are owned by their respective copyright owners.
     11            *
     12            * COPYRIGHT(c) 2020 STMicroelectronics
     13            *
     14            * Redistribution and use in source and binary forms, with or without modification,
     15            * are permitted provided that the following conditions are met:
     16            *   1. Redistributions of source code must retain the above copyright notice,
     17            *      this list of conditions and the following disclaimer.
     18            *   2. Redistributions in binary form must reproduce the above copyright notice,
     19            *      this list of conditions and the following disclaimer in the documentation
     20            *      and/or other materials provided with the distribution.
     21            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     22            *      may be used to endorse or promote products derived from this software
     23            *      without specific prior written permission.
     24            *
     25            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     26            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     27            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     28            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     29            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     30            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     31            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     32            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     33            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     34            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     35            *
     36            ******************************************************************************
     37            */
     38          /* Includes ------------------------------------------------------------------*/
     39          #include "main.h"
     40          #include "stm32f4xx_hal.h"
     41          
     42          /* USER CODE BEGIN Includes */
     43          
     44          
     45          /* USER CODE END Includes */
     46          
     47          /* Private variables ---------------------------------------------------------*/
     48          SPI_HandleTypeDef hspi1;

   \                                 In section .bss, align 4
     49          DMA_HandleTypeDef hdma_spi1_rx;
   \                     hdma_spi1_rx:
   \   00000000                      DS8 96

   \                                 In section .bss, align 4
     50          DMA_HandleTypeDef hdma_spi1_tx;
   \                     hdma_spi1_tx:
   \   00000000                      DS8 96
     51          
     52          UART_HandleTypeDef huart6;

   \                                 In section .bss, align 4
     53          DMA_HandleTypeDef hdma_usart6_tx;
   \                     hdma_usart6_tx:
   \   00000000                      DS8 96

   \                                 In section .bss, align 4
     54          DMA_HandleTypeDef hdma_usart6_rx;
   \                     hdma_usart6_rx:
   \   00000000                      DS8 96

   \                                 In section .data, align 4
   \                     hspi1:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000030   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000050   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     huart6:
   \   00000058   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000068   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000078   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000088   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     55          
     56          /* USER CODE BEGIN PV */
     57          /* Private variables ---------------------------------------------------------*/
     58          uint8_t TxData[7] = {1,0,2,4,5,1,5};
   \                     TxData:
   \   00000098   0x01 0x00          DC8 1, 0, 2, 4, 5, 1, 5, 0
   \              0x02 0x04    
   \              0x05 0x01    
   \              0x05 0x00    
     59          uint8_t RxData[7];
   \                     RxData:
   \   000000A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     60          uint8_t Uart_RxData[7];
   \                     Uart_RxData:
   \   000000A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     61          
     62          /* USER CODE END PV */
     63          
     64          /* Private function prototypes -----------------------------------------------*/
     65          void SystemClock_Config(void);
     66          static void MX_GPIO_Init(void);
     67          static void MX_DMA_Init(void);
     68          static void MX_SPI1_Init(void);
     69          static void MX_USART6_UART_Init(void);
     70          static void MX_NVIC_Init(void);
     71          
     72          /* USER CODE BEGIN PFP */
     73          /* Private function prototypes -----------------------------------------------*/
     74          
     75          /* USER CODE END PFP */
     76          
     77          /* USER CODE BEGIN 0 */

   \                                 In section .text, align 2, keep-with-next
     78          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi1){
     79          }
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     80          /* USER CODE END 0 */
     81          
     82          /**
     83            * @brief  The application entry point.
     84            *
     85            * @retval None
     86            */

   \                                 In section .text, align 2, keep-with-next
     87          int main(void)
     88          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     89            /* USER CODE BEGIN 1 */
     90          
     91            /* USER CODE END 1 */
     92          
     93            /* MCU Configuration----------------------------------------------------------*/
     94          
     95            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     96            HAL_Init();
   \   00000004   0x.... 0x....      BL       HAL_Init
     97          
     98            /* USER CODE BEGIN Init */
     99          
    100            /* USER CODE END Init */
    101          
    102            /* Configure the system clock */
    103            SystemClock_Config();
   \   00000008   0x.... 0x....      BL       SystemClock_Config
    104          
    105            /* USER CODE BEGIN SysInit */
    106          
    107            /* USER CODE END SysInit */
    108          
    109            /* Initialize all configured peripherals */
    110            MX_GPIO_Init();
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x....             LDR.N    R0,??DataTable1  ;; 0x40023830
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000001A   0x6001             STR      R1,[R0, #+0]
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0xF001 0x0101      AND      R1,R1,#0x1
   \   00000022   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000026   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000002A   0x6001             STR      R1,[R0, #+0]
   \   0000002C   0x6801             LDR      R1,[R0, #+0]
   \   0000002E   0xF001 0x0104      AND      R1,R1,#0x4
   \   00000032   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000036   0xF441 0x0180      ORR      R1,R1,#0x400000
   \   0000003A   0x6001             STR      R1,[R0, #+0]
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF400 0x0080      AND      R0,R0,#0x400000
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x2039             MOVS     R0,#+57
   \   0000004A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000004E   0x2039             MOVS     R0,#+57
   \   00000050   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x4611             MOV      R1,R2
   \   00000058   0x203B             MOVS     R0,#+59
   \   0000005A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000005E   0x203B             MOVS     R0,#+59
   \   00000060   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0x4611             MOV      R1,R2
   \   00000068   0x2045             MOVS     R0,#+69
   \   0000006A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000006E   0x2045             MOVS     R0,#+69
   \   00000070   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    111            MX_DMA_Init();
    112            MX_SPI1_Init();
   \   00000074   0x....             LDR.N    R4,??DataTable1_1
   \   00000076   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40013000
   \   00000078   0x6020             STR      R0,[R4, #+0]
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x6060             STR      R0,[R4, #+4]
   \   0000007E   0x60A0             STR      R0,[R4, #+8]
   \   00000080   0x60E0             STR      R0,[R4, #+12]
   \   00000082   0x6120             STR      R0,[R4, #+16]
   \   00000084   0x6160             STR      R0,[R4, #+20]
   \   00000086   0x61A0             STR      R0,[R4, #+24]
   \   00000088   0x6220             STR      R0,[R4, #+32]
   \   0000008A   0x6260             STR      R0,[R4, #+36]
   \   0000008C   0x62A0             STR      R0,[R4, #+40]
   \   0000008E   0x200A             MOVS     R0,#+10
   \   00000090   0x62E0             STR      R0,[R4, #+44]
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       HAL_SPI_Init
   \   00000098   0xB100             CBZ.N    R0,??main_0
   \                     ??main_1: (+1)
   \   0000009A   0xE7FE             B.N      ??main_1
    113            MX_USART6_UART_Init();
   \                     ??main_0: (+1)
   \   0000009C   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40011400
   \   0000009E   0x65A0             STR      R0,[R4, #+88]
   \   000000A0   0xF44F 0x5016      MOV      R0,#+9600
   \   000000A4   0x65E0             STR      R0,[R4, #+92]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x6620             STR      R0,[R4, #+96]
   \   000000AA   0x6660             STR      R0,[R4, #+100]
   \   000000AC   0x66A0             STR      R0,[R4, #+104]
   \   000000AE   0x200C             MOVS     R0,#+12
   \   000000B0   0x66E0             STR      R0,[R4, #+108]
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x6720             STR      R0,[R4, #+112]
   \   000000B6   0x6760             STR      R0,[R4, #+116]
   \   000000B8   0xF104 0x0058      ADD      R0,R4,#+88
   \   000000BC   0x.... 0x....      BL       HAL_UART_Init
   \   000000C0   0xB100             CBZ.N    R0,??main_2
   \                     ??main_3: (+1)
   \   000000C2   0xE7FE             B.N      ??main_3
    114          
    115            /* Initialize interrupts */
    116            MX_NVIC_Init();
   \                     ??main_2: (+1)
   \   000000C4   0x2200             MOVS     R2,#+0
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x2038             MOVS     R0,#+56
   \   000000CA   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   000000CE   0x2038             MOVS     R0,#+56
   \   000000D0   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    117            /* USER CODE BEGIN 2 */
    118            HAL_SPI_TransmitReceive_DMA(&hspi1, TxData, RxData, 7);
   \   000000D4   0x2307             MOVS     R3,#+7
   \   000000D6   0xF104 0x02A0      ADD      R2,R4,#+160
   \   000000DA   0xF104 0x0198      ADD      R1,R4,#+152
   \   000000DE   0x4620             MOV      R0,R4
   \   000000E0   0x.... 0x....      BL       HAL_SPI_TransmitReceive_DMA
    119            HAL_UART_Receive_DMA(&huart6, Uart_RxData, 7);
   \   000000E4   0x2207             MOVS     R2,#+7
   \   000000E6   0xF104 0x01A8      ADD      R1,R4,#+168
   \   000000EA   0xF104 0x0058      ADD      R0,R4,#+88
   \   000000EE   0x.... 0x....      BL       HAL_UART_Receive_DMA
    120          //  u8g_InitComFn(&u8g, &u8g_dev_ssd1306_128x64_hw_spi, u8g_com_hw_spi_fn);  
    121            HAL_Delay(100);  
   \   000000F2   0x2064             MOVS     R0,#+100
   \   000000F4   0x.... 0x....      BL       HAL_Delay
    122            /* USER CODE END 2 */
    123          
    124            /* Infinite loop */
    125            /* USER CODE BEGIN WHILE */
    126            while (1)
   \                     ??main_4: (+1)
   \   000000F8   0xE7FE             B.N      ??main_4
    127            {
    128          
    129            /* USER CODE END WHILE */
    130          
    131            /* USER CODE BEGIN 3 */
    132          //    u8g_FirstPage(&u8g);  
    133          //       do  
    134          //       {  
    135          //            u8g.font = u8g_font_profont22;  
    136          //            u8g_DrawStr(&u8g, 20, 55, "Hello");  
    137          //       } while ( u8g_NextPage(&u8g) );  
    138          //    HAL_Delay(100); 
    139          
    140              /* Warning!! hc-12 model needs 3.3v to operate */
    141          //    HAL_UART_Transmit(&huart6, RxData, 7, 50);
    142          //    HAL_UART_Transmit(&huart6, "\n", 1, 50);
    143          //    HAL_Delay(10);
    144           //   Uart_Transmit(&huart6,RxData,7,50);
    145            }
    146            /* USER CODE END 3 */
    147          
    148          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x9100             STR      R1,[SP, #+0]
   \   00000002   0x9900             LDR      R1,[SP, #+0]
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x4770             BX       LR
    149          
    150          /**
    151            * @brief System Clock Configuration
    152            * @retval None
    153            */

   \                                 In section .text, align 2, keep-with-next
    154          void SystemClock_Config(void)
    155          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
    156          
    157            RCC_OscInitTypeDef RCC_OscInitStruct;
    158            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    159          
    160              /**Configure the main internal regulator output voltage 
    161              */
    162            __HAL_RCC_PWR_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40023840
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF000 0x5080      AND      R0,R0,#0x10000000
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
    163          
    164            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x....             LDR.N    R0,??DataTable1_5  ;; 0x40007000
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0xF421 0x4140      BIC      R1,R1,#0xC000
   \   00000028   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   0000002C   0x6001             STR      R1,[R0, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF400 0x4040      AND      R0,R0,#0xC000
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x9800             LDR      R0,[SP, #+0]
    165          
    166              /**Initializes the CPU, AHB and APB busses clocks 
    167              */
    168            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9006             STR      R0,[SP, #+24]
    169            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9009             STR      R0,[SP, #+36]
    170            RCC_OscInitStruct.HSICalibrationValue = 16;
   \   00000040   0x2010             MOVS     R0,#+16
   \   00000042   0x900A             STR      R0,[SP, #+40]
    171            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x900C             STR      R0,[SP, #+48]
    172            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \   00000048   0xA806             ADD      R0,SP,#+24
   \   0000004A   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   0000004E   0xB100             CBZ.N    R0,??SystemClock_Config_0
   \                     ??SystemClock_Config_1: (+1)
   \   00000050   0xE7FE             B.N      ??SystemClock_Config_1
    173            {
    174              _Error_Handler(__FILE__, __LINE__);
    175            }
    176          
    177              /**Initializes the CPU, AHB and APB busses clocks 
    178              */
    179            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    180                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \                     ??SystemClock_Config_0: (+1)
   \   00000052   0x200F             MOVS     R0,#+15
   \   00000054   0x9001             STR      R0,[SP, #+4]
    181            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    182            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    183            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    184            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    185          
    186            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x9002             STR      R0,[SP, #+8]
   \   0000005C   0x9003             STR      R0,[SP, #+12]
   \   0000005E   0x9004             STR      R0,[SP, #+16]
   \   00000060   0x9005             STR      R0,[SP, #+20]
   \   00000062   0xA801             ADD      R0,SP,#+4
   \   00000064   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   00000068   0xB100             CBZ.N    R0,??SystemClock_Config_2
   \                     ??SystemClock_Config_3: (+1)
   \   0000006A   0xE7FE             B.N      ??SystemClock_Config_3
    187            {
    188              _Error_Handler(__FILE__, __LINE__);
    189            }
    190          
    191              /**Configure the Systick interrupt time 
    192              */
    193            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \                     ??SystemClock_Config_2: (+1)
   \   0000006C   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   00000070   0xF44F 0x717A      MOV      R1,#+1000
   \   00000074   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000078   0x.... 0x....      BL       HAL_SYSTICK_Config
    194          
    195              /**Configure the Systick 
    196              */
    197            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   0000007C   0x2004             MOVS     R0,#+4
   \   0000007E   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
    198          
    199            /* SysTick_IRQn interrupt configuration */
    200            HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0xF04F 0x30FF      MOV      R0,#-1
   \   0000008A   0x.... 0x....      BL       HAL_NVIC_SetPriority
    201          }
   \   0000008E   0xB013             ADD      SP,SP,#+76
   \   00000090   0xBD00             POP      {PC}             ;; return
    202          
    203          /**
    204            * @brief NVIC Configuration.
    205            * @retval None
    206            */
    207          static void MX_NVIC_Init(void)
    208          {
    209            /* DMA2_Stream0_IRQn interrupt configuration */
    210            HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
    211            HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
    212          }
    213          
    214          /* SPI1 init function */
    215          static void MX_SPI1_Init(void)
    216          {
    217          
    218            /* SPI1 parameter configuration*/
    219            hspi1.Instance = SPI1;
    220            hspi1.Init.Mode = SPI_MODE_SLAVE;
    221            hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    222            hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    223            hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    224            hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    225            hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
    226            hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    227            hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    228            hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    229            hspi1.Init.CRCPolynomial = 10;
    230            if (HAL_SPI_Init(&hspi1) != HAL_OK)
    231            {
    232              _Error_Handler(__FILE__, __LINE__);
    233            }
    234          
    235          }
    236          
    237          /* USART6 init function */
    238          static void MX_USART6_UART_Init(void)
    239          {
    240          
    241            huart6.Instance = USART6;
    242            huart6.Init.BaudRate = 9600;
    243            huart6.Init.WordLength = UART_WORDLENGTH_8B;
    244            huart6.Init.StopBits = UART_STOPBITS_1;
    245            huart6.Init.Parity = UART_PARITY_NONE;
    246            huart6.Init.Mode = UART_MODE_TX_RX;
    247            huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    248            huart6.Init.OverSampling = UART_OVERSAMPLING_16;
    249            if (HAL_UART_Init(&huart6) != HAL_OK)
    250            {
    251              _Error_Handler(__FILE__, __LINE__);
    252            }
    253          
    254          }
    255          
    256          /** 
    257            * Enable DMA controller clock
    258            */
    259          static void MX_DMA_Init(void) 
    260          {
    261            /* DMA controller clock enable */
    262            __HAL_RCC_DMA2_CLK_ENABLE();
    263          
    264            /* DMA interrupt init */
    265            /* DMA2_Stream1_IRQn interrupt configuration */
    266            HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
    267            HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
    268            /* DMA2_Stream3_IRQn interrupt configuration */
    269            HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
    270            HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
    271            /* DMA2_Stream6_IRQn interrupt configuration */
    272            HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
    273            HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
    274          
    275          }
    276          
    277          /** Pinout Configuration
    278          */
    279          static void MX_GPIO_Init(void)
    280          {
    281          
    282            /* GPIO Ports Clock Enable */
    283            __HAL_RCC_GPIOA_CLK_ENABLE();
    284            __HAL_RCC_GPIOC_CLK_ENABLE();
    285          
    286          }
    287          
    288          /* USER CODE BEGIN 4 */
    289          
    290          /* USER CODE END 4 */
    291          
    292          /**
    293            * @brief  This function is executed in case of error occurrence.
    294            * @param  file: The file name as string.
    295            * @param  line: The line in file as a number.
    296            * @retval None
    297            */

   \                                 In section .text, align 2, keep-with-next
    298          void _Error_Handler(char *file, int line)
    299          {
    300            /* USER CODE BEGIN Error_Handler_Debug */
    301            /* User can add his own implementation to report the HAL error return state */
    302            while(1)
   \                     _Error_Handler: (+1)
   \                     ??_Error_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??_Error_Handler_0
    303            {
    304            }
    305            /* USER CODE END Error_Handler_Debug */
    306          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     hspi1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x40007000         DC32     0x40007000
    307          
    308          #ifdef  USE_FULL_ASSERT
    309          /**
    310            * @brief  Reports the name of the source file and the source line number
    311            *         where the assert_param error has occurred.
    312            * @param  file: pointer to the source file name
    313            * @param  line: assert_param error line source number
    314            * @retval None
    315            */
    316          void assert_failed(uint8_t* file, uint32_t line)
    317          { 
    318            /* USER CODE BEGIN 6 */
    319            /* User can add his own implementation to report the file name and line number,
    320               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    321            /* USER CODE END 6 */
    322          }
    323          #endif /* USE_FULL_ASSERT */
    324          
    325          /**
    326            * @}
    327            */
    328          
    329          /**
    330            * @}
    331            */
    332          
    333          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_SPI_RxCpltCallback
      80   SystemClock_Config
        80   -> HAL_NVIC_SetPriority
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_GetHCLKFreq
        80   -> HAL_RCC_OscConfig
        80   -> HAL_SYSTICK_CLKSourceConfig
        80   -> HAL_SYSTICK_Config
       0   _Error_Handler
      16   main
        16   -> HAL_Delay
        16   -> HAL_Init
        16   -> HAL_NVIC_EnableIRQ
        16   -> HAL_NVIC_SetPriority
        16   -> HAL_SPI_Init
        16   -> HAL_SPI_TransmitReceive_DMA
        16   -> HAL_UART_Init
        16   -> HAL_UART_Receive_DMA
        16   -> SystemClock_Config


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
      12  ?Subroutine0
       2  HAL_SPI_RxCpltCallback
     146  SystemClock_Config
       2  _Error_Handler
      96  hdma_spi1_rx
      96  hdma_spi1_tx
      96  hdma_usart6_rx
      96  hdma_usart6_tx
     176  hspi1
          huart6
          TxData
          RxData
          Uart_RxData
     250  main

 
 384 bytes in section .bss
 176 bytes in section .data
 436 bytes in section .text
 
 436 bytes of CODE memory
 560 bytes of DATA memory

Errors: none
Warnings: none
